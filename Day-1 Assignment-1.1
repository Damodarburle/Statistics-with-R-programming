2) 
i)write a function in r programming to print generate fibonacci sequence using recursion in r 
ii)Find sum of natural numbers up to 10 without using formula using loop statement in r language
iii)create a vector 1:10 and find a square of each number and store that in a seperate list 

a)
fibonacci <- function(n) {
  if (n <= 0) {
    stop("n must be a positive integer.")
  } else if (n == 1) {
    return(0)
  } else if (n == 2) {
    return(1)
  } else {
    return(fibonacci(n - 1) + fibonacci(n - 2))
  }
}

print_fibonacci_sequence <- function(n) {
  if (n <= 0) {
    stop("n must be a positive integer.")
  }
  
  cat("Fibonacci sequence:")
  for (i in 1:n) {
    cat(" ", fibonacci(i))
  }
  cat("\n")
}
print_fibonacci_sequence(10)

output:
Fibonacci sequence: 0 1 1 2 3 5 8 13 21 34

b)
# Initialize the sum variable to store the total sum
sum_of_numbers <- 0

# Loop from 1 to 10 and add each number to the sum
for (i in 1:10) {
  sum_of_numbers <- sum_of_numbers + i
}

# Print the final sum
cat("Sum of natural numbers up to 10 is:", sum_of_numbers)

output:
Sum of natural numbers up to 10 is: 55


c)
# Step 1: Create the vector from 1 to 10
original_vector <- 1:10

# Step 2: Find the square of each number using the '**' operator
squared_vector <- original_vector ** 2

# Step 3: Store the squared values in a separate list
squared_list <- as.list(squared_vector)

# Print the squared list
print(squared_list)

out put:
Rscript /tmp/mtEQ6oNzXM.r
[[1]]
[1] 1[[2]]
[1] 4

[[3]]
[1] 9

[[4]]
[1] 16

[[5]]
[1] 25

[[6]]
[1] 36

[[7]]
[1] 49

[[8]]
[1] 64

[[9]]
[1] 81

[[10]]
[1] 100




